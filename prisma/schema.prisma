generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==========================================
// AUTHENTICATION & USER MANAGEMENT
// ==========================================

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main user table - simplified
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  avatars       Avatar[]
  transactions  Transaction[]

  @@index([email])
}

// ==========================================
// BUSINESS DATA
// ==========================================

// User business profile - all subscription & usage data
model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Subscription
  plan              String   @default("free") // "free" | "pro"
  subscriptionStatus String  @default("inactive") // "active" | "inactive" | "canceled" | "past_due"
  
  // Credits system
  credits           Int      @default(60) // Current credit balance
  totalCreditsEarned Int     @default(60) // Total credits ever earned
  totalCreditsSpent Int      @default(0)  // Total credits ever spent
  
  // Payment gateway info
  stripeCustomerId  String?
  squareCustomerId  String?
  currentPriceId    String? // Current subscription price ID
  
  // Subscription dates
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  
  // Usage stats
  avatarsCreated    Int      @default(0)
  lastActiveAt      DateTime @default(now())
  
  // Settings
  preferences       Json?    @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([plan, subscriptionStatus])
  @@index([stripeCustomerId])
  @@index([squareCustomerId])
}

// ==========================================
// AVATAR SYSTEM
// ==========================================

model Avatar {
  id              String   @id @default(cuid())
  userId          String
  
  // Basic info
  name            String   @default("Untitled Avatar")
  prompt          String?  // User's generation prompt
  style           String?  // "anime" | "realistic" | "cartoon" | "chibi"
  
  // Generation status
  status          String   @default("generating") // "generating" | "completed" | "failed"
  failureReason   String?
  
  // File storage
  images          Json?    // { original: { url, key }, expressions: {...} }
  
  // User interaction
  isFavorite      Boolean  @default(false)
  downloadCount   Int      @default(0)
  
  // Generation metadata
  generationData  Json?    // AI model, seed, etc.
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, isFavorite])
  @@index([status])
}

// ==========================================
// PAYMENT & TRANSACTION SYSTEM
// ==========================================

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  
  // Transaction basics
  type            String   // "credit_purchase" | "credit_spend" | "subscription" | "refund"
  amount          Int      // Credits amount (positive for earn, negative for spend)
  description     String   // Human readable description
  
  // Payment gateway
  gateway         String?  // "stripe" | "square" | null for internal
  gatewayTxnId    String?  // External transaction ID
  
  // Subscription context
  subscriptionId  String?  // External subscription ID
  priceId         String?  // Price plan ID
  
  // Status
  status          String   @default("completed") // "pending" | "completed" | "failed" | "refunded"
  
  // Metadata
  metadata        Json?    // Additional data
  
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([gateway, gatewayTxnId])
  @@index([createdAt])
}

// ==========================================
// SYSTEM TABLES
// ==========================================

// Webhook event tracking for idempotency
model WebhookEvent {
  id          String   @id @default(cuid())
  provider    String   // "stripe" | "square"
  eventId     String   // External event ID
  eventType   String   // Event type
  processed   Boolean  @default(false)
  processedAt DateTime?
  error       String?
  metadata    Json?    @default("{}")
  createdAt   DateTime @default(now())

  @@unique([provider, eventId])
  @@index([processed])
}

// Email leads from landing page
model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  source    String?  // Where they came from
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())

  @@index([createdAt])
}
