# Staging Deployment Workflow - Develop Branch
name: 🧪 Staging Deployment

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: legnext-midjourney-api-staging
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Setup Dependencies (Shared)
  setup:
    name: 🛠️ Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}

      - name: Cache Prisma Client
        uses: actions/cache@v3
        with:
          path: node_modules/.prisma
          key: prisma-${{ hashFiles('prisma/schema.prisma') }}

  # Job 2: Code Quality Checks
  quality-checks:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-

      - name: Restore Prisma Client
        uses: actions/cache@v3
        with:
          path: node_modules/.prisma
          key: prisma-${{ hashFiles('prisma/schema.prisma') }}

      - name: TypeScript Check
        run: pnpm run lint

      - name: Security Audit
        run: pnpm audit --audit-level high
        continue-on-error: true  # Don't fail staging for moderate security issues

      - name: Check Prisma Schema
        run: pnpm prisma validate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}

  # Job 3: Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [setup]
    # Note: Can run in parallel with quality-checks for faster pipeline
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Restore Prisma Client
        uses: actions/cache@v3
        with:
          path: node_modules/.prisma
          key: prisma-${{ hashFiles('prisma/schema.prisma') }}

      - name: Generate build cache key
        id: build-cache
        run: |
          echo "key=build-${{ github.sha }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', 'next.config.js', 'tailwind.config.js') }}" >> $GITHUB_OUTPUT

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ steps.build-cache.outputs.key }}
          restore-keys: |
            build-${{ github.sha }}-
            build-

      - name: Build application
        run: pnpm build
        env:
          # Build-time environment variables for staging
          NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}
          NEXT_PUBLIC_STRIPE_PRO_PRICE_ID: ${{ secrets.NEXT_PUBLIC_STAGING_STRIPE_PRO_PRICE_ID }}
          # Backend API 配置
          BACKEND_API_URL: ${{ secrets.STAGING_BACKEND_API_URL }}
          BACKEND_API_KEY: ${{ secrets.STAGING_BACKEND_API_KEY }}
          # 数据库配置（构建时也需要）
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
          # 其他可能需要的环境变量
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          # R2 配置
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_PUBLIC_URL: ${{ secrets.R2_PUBLIC_URL }}
          # Google OAuth
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}

      - name: Run tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test
          else
            echo "No tests found, skipping test execution"
          fi
        continue-on-error: true

  # Job 4: Docker Build (Staging)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-checks]
    # Wait for both build and quality checks to complete
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=staging-latest
            type=sha,prefix=staging-
          flavor: |
            latest=false

      - name: Debug metadata output
        run: |
          echo "🔍 Metadata outputs:"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"
          echo "JSON: ${{ steps.meta.outputs.json }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            DIRECT_URL=${{ secrets.STAGING_DIRECT_URL }}
            BACKEND_API_KEY=${{ secrets.STAGING_BACKEND_API_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            NEXTAUTH_SECRET=${{ secrets.STAGING_NEXTAUTH_SECRET }}

  # Job 5: Deploy to Staging
  deploy-staging:
    name: 🚢 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    environment: staging
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_VPS_SSH_KEY }}

      - name: Deploy to Staging VPS (Inline Script)
        run: |
          # Use staging-latest tag for deployment (always prefer this stable tag)
          STAGING_LATEST_TAG="${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:staging-latest"

          echo "🔍 Available tags: ${{ needs.docker-build.outputs.image-tag }}"
          echo "🎯 Using deployment tag: $STAGING_LATEST_TAG"

          IMAGE_TAG="$STAGING_LATEST_TAG"

          # Create deployment script
          cat > /tmp/staging-deploy.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "🚀 开始 ClawCloud VPS 测试环境部署..."
          echo "🔍 调试信息: IMAGE_TAG = $1"

          IMAGE_TAG="$1"

          # 1. 进入项目目录
          cd /opt/legnext-staging

          # 2. 检查并备份当前配置
          echo "📁 当前目录内容:"
          ls -la

          if [ -f docker-compose.yml ]; then
              echo "📋 备份 docker-compose.yml"
              cp docker-compose.yml docker-compose.yml.backup
              echo "🔍 当前 docker-compose.yml 内容:"
              cat docker-compose.yml
          else
              echo "❌ docker-compose.yml 文件不存在"
              exit 1
          fi

          # 3. 停止现有服务
          echo "⏹️ 停止现有服务..."
          docker-compose down || true

          # 4. 拉取最新镜像
          echo "📥 拉取最新镜像: $IMAGE_TAG"
          if [ -z "$IMAGE_TAG" ]; then
              echo "❌ IMAGE_TAG 为空，无法拉取镜像"
              exit 1
          fi
          docker pull "$IMAGE_TAG"

          # 5. 更新 docker-compose.yml 中的镜像标签
          echo "🔄 更新 docker-compose.yml 中的镜像标签..."

          # 更新 app 服务的镜像
          sed -i "/services:/,/app:/{/image:/s|image:.*|image: $IMAGE_TAG|}" docker-compose.yml

          # 如果 Redis 镜像也是空的，设置默认值
          sed -i "/redis:/,/container_name:/{/image:.*\$/s|image:.*|image: redis:7-alpine|}" docker-compose.yml

          echo "✅ 更新后的 docker-compose.yml:"
          cat docker-compose.yml

          # 6. 清理旧镜像和容器
          echo "🧹 清理旧资源..."
          docker system prune -f

          # 7. 启动服务
          echo "🚀 启动服务..."
          docker-compose up -d

          # 8. 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 15

          # 9. 健康检查
          echo "🏥 执行健康检查..."
          for i in {1..10}; do
              if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                  echo "✅ ClawCloud 测试环境部署成功！"

                  # 10. 重新加载Nginx
                  sudo systemctl reload nginx

                  # 11. 显示服务状态
                  echo "📊 服务状态:"
                  docker-compose ps

                  echo "🎉 部署完成！访问地址: https://staging-a93116.legnext.ai"
                  exit 0
              fi
              echo "⏳ 健康检查尝试 $i/10..."
              sleep 3
          done

          echo "❌ 健康检查失败，部署可能有问题"
          echo "📝 查看日志:"
          docker-compose logs --tail=50

          exit 1
          DEPLOY_SCRIPT

          # Transfer and execute the script
          scp -o StrictHostKeyChecking=no /tmp/staging-deploy.sh ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_HOST }}:/tmp/
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_HOST }} "chmod +x /tmp/staging-deploy.sh && /tmp/staging-deploy.sh '$IMAGE_TAG'"

  # Job 6: Database Migration (Staging)
  staging-db-migration:
    name: 🗄️ Staging DB Migration
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Prisma CLI only (if cache miss)
        run: |
          if [ ! -d "node_modules" ] || [ ! -d "node_modules/.bin" ]; then
            pnpm add -D prisma
          fi

      - name: Run staging database migrations
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
        continue-on-error: true  # Don't fail if migration has issues in staging

  # Job 7: Staging Health Check
  staging-health-check:
    name: 🏥 Staging Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, staging-db-migration]
    if: always() && needs.deploy-staging.result == 'success'
    steps:
      - name: Wait for staging deployment
        run: sleep 20

      - name: Health check - Staging API
        run: |
          for i in {1..5}; do
            if curl -f -s -o /dev/null https://${{ secrets.STAGING_DOMAIN }}/health; then
              echo "✅ Staging health check passed"
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying..."
            sleep 5
          done
          echo "❌ Staging health check failed"
          exit 1
        continue-on-error: true

      - name: Basic functionality test
        run: |
          # Test homepage
          if curl -f -s https://${{ secrets.STAGING_DOMAIN }}/ > /dev/null; then
            echo "✅ Staging homepage accessible"
          else
            echo "❌ Staging homepage not accessible"
          fi
          
          # Test API endpoints
          if curl -f -s https://${{ secrets.STAGING_DOMAIN }}/api/auth/session > /dev/null; then
            echo "✅ Staging auth API accessible"
          else
            echo "❌ Staging auth API not accessible"
          fi
        continue-on-error: true

  # Job 8: Performance and Security Testing
  staging-tests:
    name: 🧪 Staging Integration Tests
    runs-on: ubuntu-latest
    needs: staging-health-check
    if: needs.staging-health-check.result == 'success'
    steps:
      - name: Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ secrets.STAGING_DOMAIN }}
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Security Headers Check
        run: |
          response=$(curl -s -I https://${{ secrets.STAGING_DOMAIN }})
          
          echo "🔍 Checking security headers..."
          
          if echo "$response" | grep -q "X-Frame-Options"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "❌ X-Frame-Options header missing"
          fi
          
          if echo "$response" | grep -q "X-Content-Type-Options"; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "❌ X-Content-Type-Options header missing"
          fi
        continue-on-error: true

  # Job 9: PR Comment with Staging Info
  pr-comment:
    name: 📝 Update PR with Staging Info
    runs-on: ubuntu-latest
    needs: [staging-health-check, staging-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with staging deployment info
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## 🧪 Staging Deployment Status
            
            **🔗 Staging URL**: https://${{ secrets.STAGING_DOMAIN }}
            **🏷️ Docker Image**: \`${{ needs.docker-build.outputs.image-tag }}\`
            **🏥 Health Check**: ${{ needs.staging-health-check.result == 'success' && '✅ Passed' || '❌ Failed' }}
            **🧪 Tests**: ${{ needs.staging-tests.result == 'success' && '✅ Passed' || needs.staging-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            
            ### 🧪 Test the staging environment:
            - [ ] Login/Logout functionality
            - [ ] API endpoints working
            - [ ] Payment flow (test mode)
            - [ ] Image generation functionality
            - [ ] Database operations
            
            ### 🔗 Quick Links:
            - [Staging Site](https://${{ secrets.STAGING_DOMAIN }})
            - [Health Check](https://${{ secrets.STAGING_DOMAIN }}/health)
            - [API Status](https://${{ secrets.STAGING_DOMAIN }}/api/auth/session)
            
            ---
            *Auto-generated from GitHub Actions workflow*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 10: Slack Notification
  notify:
    name: 📢 Notify Staging Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, staging-health-check]
    if: always()
    steps:
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🧪 *Staging Deployment Complete*
            
            📋 Branch: `${{ github.ref_name }}`
            🏷️ Image: `${{ needs.docker-build.outputs.image-tag }}`
            🌐 URL: https://${{ secrets.STAGING_DOMAIN }}
            ✅ Health: ${{ needs.staging-health-check.result == 'success' && '✅ Healthy' || '❌ Failed' }}
            
            ${{ github.event_name == 'pull_request' && format('🔗 PR: {0}', github.event.pull_request.html_url) || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''

  # Job 11: Cleanup Old Images
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: staging-health-check
    if: always()
    # Runs cleanup regardless of other job outcomes
    steps:
      - name: Cleanup old staging images on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_VPS_USERNAME }}@${{ secrets.STAGING_VPS_HOST }} << 'EOF'
            # Keep only the latest 3 staging images
            docker images --format "table {{.Repository}}:{{.Tag}} {{.CreatedAt}}" | \
            grep legnext-midjourney-api-staging | \
            sort -k2 -r | \
            tail -n +4 | \
            awk '{print $1}' | \
            xargs -r docker rmi || true
            
            echo "✅ Cleaned up old staging images"
          EOF
        continue-on-error: true