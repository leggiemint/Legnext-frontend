name: Deploy to VPS with Caddy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXTAUTH_SECRET: test-secret-key-for-testing
          NEXTAUTH_URL: http://localhost:3000
          SKIP_ENV_VALIDATION: true
        run: |
          # Generate Prisma client
          pnpm prisma generate
          # Run database migrations
          pnpm prisma db push

      - name: Run linting and type checking
        run: pnpm run lint

      - name: Build application
        env:
          # Database
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test_db
          # Auth
          NEXTAUTH_SECRET: test-secret-key-for-testing-min-32-chars-long
          NEXTAUTH_URL: http://localhost:3000
          # Payment (dummy values for build)
          PAYMENT_GATEWAY: stripe
          STRIPE_PUBLIC_KEY: pk_test_dummy_key_for_build
          STRIPE_SECRET_KEY: sk_test_dummy_key_for_build  
          STRIPE_WEBHOOK_SECRET: whsec_dummy_secret_for_build
          # Email (dummy value for build)
          RESEND_API_KEY: re_dummy_api_key_for_build_only
          # OAuth (dummy values for build)
          GOOGLE_ID: dummy-google-client-id.apps.googleusercontent.com
          GOOGLE_SECRET: dummy-google-client-secret
          # Sentry (optional for build)
          SENTRY_AUTH_TOKEN: dummy-sentry-token-for-build
          SENTRY_ORG: tritonix
          SENTRY_PROJECT: legnext-frontend
          # Others
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true
        run: pnpm run build

      - name: Create deployment package
        if: github.ref == 'refs/heads/main'
        run: |
          # Create deployment directory
          mkdir -p deploy-package
          
          # Copy necessary files for production
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp -r prisma deploy-package/
          cp package.json deploy-package/
          cp pnpm-lock.yaml deploy-package/
          cp next.config.js deploy-package/
          cp tailwind.config.js deploy-package/
          cp ecosystem.config.js deploy-package/
          cp -r scripts deploy-package/
          
          # Create tarball
          tar -czf deploy-package.tar.gz -C deploy-package .

      - name: Upload deployment package
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy-package.tar.gz
          retention-days: 1

      - name: Notify build status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Build successful!"
            
            # Discord notification
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "embeds": [{
                    "title": "üî® Build Successful",
                    "description": "Legnext application build completed successfully!",
                    "color": 5763719,
                    "fields": [
                      {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                      {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                      {"name": "Workflow", "value": "Build & Test", "inline": true}
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' 2>/dev/null || echo "Discord notification failed"
            fi
            
            # È£û‰π¶ notification
            if [ -n "${{ secrets.FEISHU_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.FEISHU_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "msg_type": "interactive",
                  "card": {
                    "elements": [
                      {
                        "tag": "div",
                        "text": {
                          "content": "üî® **ÊûÑÂª∫ÊàêÂäü**\n\nLegnext Â∫îÁî®ÊûÑÂª∫ÂÆåÊàêÔºÅ",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "tag": "hr"
                      },
                      {
                        "tag": "div",
                        "fields": [
                          {
                            "is_short": true,
                            "text": {
                              "content": "**ÂàÜÊîØ**: ${{ github.ref_name }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Êèê‰∫§**: ${{ github.sha }}",
                              "tag": "lark_md"
                            }
                          }
                        ]
                      }
                    ],
                    "header": {
                      "title": {
                        "content": "üî® Legnext ÊûÑÂª∫ÈÄöÁü•",
                        "tag": "plain_text"
                      },
                      "template": "green"
                    }
                  }
                }' 2>/dev/null || echo "È£û‰π¶ notification failed"
            fi
            
          else
            echo "‚ùå Build failed!"
            
            # Discord notification
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "embeds": [{
                    "title": "‚ùå Build Failed",
                    "description": "Legnext application build failed!",
                    "color": 15548997,
                    "fields": [
                      {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                      {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                      {"name": "Workflow", "value": "Build & Test", "inline": true},
                      {"name": "Job Status", "value": "${{ job.status }}", "inline": true}
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' 2>/dev/null || echo "Discord notification failed"
            fi
            
            # È£û‰π¶ notification
            if [ -n "${{ secrets.FEISHU_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.FEISHU_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "msg_type": "interactive",
                  "card": {
                    "elements": [
                      {
                        "tag": "div",
                        "text": {
                          "content": "‚ùå **ÊûÑÂª∫Â§±Ë¥•**\n\nLegnext Â∫îÁî®ÊûÑÂª∫Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•‰ª£Á†ÅÔºÅ",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "tag": "hr"
                      },
                      {
                        "tag": "div",
                        "fields": [
                          {
                            "is_short": true,
                            "text": {
                              "content": "**ÂàÜÊîØ**: ${{ github.ref_name }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Êèê‰∫§**: ${{ github.sha }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Áä∂ÊÄÅ**: ${{ job.status }}",
                              "tag": "lark_md"
                            }
                          }
                        ]
                      },
                      {
                        "tag": "div",
                        "text": {
                          "content": "**Êü•ÁúãËØ¶ÊÉÖ**: [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "header": {
                      "title": {
                        "content": "‚ùå Legnext ÊûÑÂª∫Â§±Ë¥•",
                        "tag": "plain_text"
                      },
                      "template": "red"
                    }
                  }
                }' 2>/dev/null || echo "È£û‰π¶ notification failed"
            fi
          fi

  # Deploy to VPS job (only on main branch)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
          APP_NAME: ${{ secrets.APP_NAME }}
        run: |
          # Copy deployment package to VPS
          scp deploy-package.tar.gz $VPS_USER@$VPS_HOST:/tmp/
          
          # Execute deployment script on VPS
          ssh $VPS_USER@$VPS_HOST << 'EOF'
            set -e
            
            # Set variables
            APP_PATH="${{ secrets.VPS_PATH }}"
            APP_NAME="${{ secrets.APP_NAME }}"
            BACKUP_PATH="$HOME/backups/$APP_NAME-$(date +%Y%m%d-%H%M%S)"
            
            echo "üöÄ Starting deployment..."
            
            # Create backup of current deployment (in user directory to avoid sudo)
            if [ -d "$APP_PATH" ]; then
              echo "üì¶ Creating backup..."
              mkdir -p "$HOME/backups"
              cp -r "$APP_PATH" "$BACKUP_PATH" 2>/dev/null || echo "‚ö†Ô∏è Backup failed, continuing..."
              echo "‚úÖ Backup attempted at $BACKUP_PATH"
            fi
            
            # Create app directory (user must have write permissions)
            mkdir -p "$APP_PATH"
            cd "$APP_PATH"
            
            # Extract new deployment
            echo "üì• Extracting deployment package..."
            tar -xzf /tmp/deploy-package.tar.gz -C "$APP_PATH"
            
            # Install pnpm if not exists
            if ! command -v pnpm &> /dev/null; then
              echo "üì¶ Installing pnpm..."
              curl -fsSL https://get.pnpm.io/install.sh | sh -
              export PATH="$HOME/.local/share/pnpm:$PATH"
            fi
            
            # Ensure pnpm is in PATH
            export PATH="$HOME/.local/share/pnpm:$PATH"
            
            # Install dependencies (including dev for build tools)
            echo "üì¶ Installing dependencies..."
            pnpm install --force
            
            # Generate Prisma client
            echo "üîß Generating Prisma client..."
            npx prisma generate
            
            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            npx prisma migrate deploy
            
            # Skip Caddy configuration update (manually managed)
            echo "‚è© Skipping Caddy configuration update (manually managed)"
            
            # Restart application with PM2
            echo "üîÑ Restarting application..."
            if command -v pm2 &> /dev/null; then
              pm2 delete $APP_NAME || true
              pm2 start ecosystem.config.js --name $APP_NAME
              pm2 save
            else
              echo "‚ö†Ô∏è  PM2 not found, please install PM2 or configure your process manager"
            fi
            
            # Cleanup
            rm -f /tmp/deploy-package.tar.gz
            
            echo "‚úÖ Deployment completed successfully!"
          EOF

      - name: Health check
        env:
          APP_URL: ${{ secrets.APP_URL }}
        run: |
          echo "üè• Running health check..."
          
          # Wait for application to start
          sleep 30
          
          # Check if application is responding
          for i in {1..5}; do
            if curl -f --connect-timeout 10 --max-time 30 "$APP_URL/api/health" || curl -f --connect-timeout 10 --max-time 30 "$APP_URL"; then
              echo "‚úÖ Health check passed - Application is responding"
              exit 0
            else
              echo "‚è≥ Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "‚ùå Health check failed - Application is not responding after 5 attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            
            # Discord notification
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "embeds": [{
                    "title": "üöÄ Deployment Successful",
                    "description": "Legnext application has been deployed successfully!",
                    "color": 5763719,
                    "fields": [
                      {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                      {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                      {"name": "URL", "value": "${{ secrets.APP_URL }}", "inline": false}
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' 2>/dev/null || echo "Discord notification failed"
            fi
            
            # È£û‰π¶ notification
            if [ -n "${{ secrets.FEISHU_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.FEISHU_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "msg_type": "interactive",
                  "card": {
                    "elements": [
                      {
                        "tag": "div",
                        "text": {
                          "content": "üöÄ **ÈÉ®ÁΩ≤ÊàêÂäü**\n\nLegnext Â∫îÁî®Â∑≤ÊàêÂäüÈÉ®ÁΩ≤ÔºÅ",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "tag": "hr"
                      },
                      {
                        "tag": "div",
                        "fields": [
                          {
                            "is_short": true,
                            "text": {
                              "content": "**ÂàÜÊîØ**: ${{ github.ref_name }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Êèê‰∫§**: ${{ github.sha }}",
                              "tag": "lark_md"
                            }
                          }
                        ]
                      },
                      {
                        "tag": "div",
                        "text": {
                          "content": "**ËÆøÈóÆÈìæÊé•**: [${{ secrets.APP_URL }}](${{ secrets.APP_URL }})",
                          "tag": "lark_md"
                        }
                      }
                    ],
                    "header": {
                      "title": {
                        "content": "üöÄ Legnext ÈÉ®ÁΩ≤ÈÄöÁü•",
                        "tag": "plain_text"
                      },
                      "template": "green"
                    }
                  }
                }' 2>/dev/null || echo "È£û‰π¶ notification failed"
            fi
            
          else
            echo "‚ùå Deployment failed!"
            
            # Discord notification
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "embeds": [{
                    "title": "‚ùå Deployment Failed",
                    "description": "Legnext application deployment failed!",
                    "color": 15548997,
                    "fields": [
                      {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                      {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                      {"name": "Job Status", "value": "${{ job.status }}", "inline": true}
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' 2>/dev/null || echo "Discord notification failed"
            fi
            
            # È£û‰π¶ notification
            if [ -n "${{ secrets.FEISHU_WEBHOOK_URL }}" ]; then
              curl -X POST "${{ secrets.FEISHU_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "msg_type": "interactive",
                  "card": {
                    "elements": [
                      {
                        "tag": "div",
                        "text": {
                          "content": "‚ùå **ÈÉ®ÁΩ≤Â§±Ë¥•**\n\nLegnext Â∫îÁî®ÈÉ®ÁΩ≤Â§±Ë¥•ÔºÅ",
                          "tag": "lark_md"
                        }
                      },
                      {
                        "tag": "hr"
                      },
                      {
                        "tag": "div",
                        "fields": [
                          {
                            "is_short": true,
                            "text": {
                              "content": "**ÂàÜÊîØ**: ${{ github.ref_name }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Êèê‰∫§**: ${{ github.sha }}",
                              "tag": "lark_md"
                            }
                          },
                          {
                            "is_short": true,
                            "text": {
                              "content": "**Áä∂ÊÄÅ**: ${{ job.status }}",
                              "tag": "lark_md"
                            }
                          }
                        ]
                      }
                    ],
                    "header": {
                      "title": {
                        "content": "‚ùå Legnext ÈÉ®ÁΩ≤Â§±Ë¥•",
                        "tag": "plain_text"
                      },
                      "template": "red"
                    }
                  }
                }' 2>/dev/null || echo "È£û‰π¶ notification failed"
            fi
          fi